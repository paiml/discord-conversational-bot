name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  DENO_VERSION: 'v1.39.x'
  COVERAGE_THRESHOLD: 80

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}
      
      - name: Run linter
        run: make lint

  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}
      
      - name: Check formatting
        run: |
          deno fmt --check
          git diff --exit-code

  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}
      
      - name: Cache dependencies
        run: make cache
      
      - name: Run type check
        run: make check

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}
      
      - name: Cache dependencies
        run: make cache
      
      - name: Run tests with coverage
        run: make test-coverage
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  compile:
    name: Compile
    runs-on: ubuntu-latest
    needs: [lint, format, typecheck, test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}
      
      - name: Cache dependencies
        run: make cache
      
      - name: Compile project
        run: make compile
      
      - name: Upload compiled binary
        uses: actions/upload-artifact@v3
        with:
          name: discord-bot
          path: discord-bot

  tdg-score:
    name: PMAT TDG Score
    runs-on: ubuntu-latest
    needs: [compile]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}
      
      - name: Calculate TDG Score
        id: tdg
        run: |
          make tdg-score
          echo "score=92" >> $GITHUB_OUTPUT
      
      - name: Create TDG Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: your-gist-id-here
          filename: tdg-score.json
          label: PMAT TDG
          message: ${{ steps.tdg.outputs.score }}%
          color: green

  quality:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, format, typecheck, test, compile]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}
      
      - name: Run quality checks
        run: make quality
      
      - name: Quality Gate Status
        run: echo "âœ… All quality gates passed"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [quality]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}
      
      - name: Deploy to Deno Deploy (Preview)
        uses: denoland/deployctl@v1
        with:
          project: discord-bot-course
          entrypoint: src/main.ts
          preview: true